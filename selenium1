import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.io.File;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

// By text content
WebElement loginButton = driver.findElement(By.xpath("//button[contains(text(), 'Login') or contains(text(), 'Sign In')]"));

WebElement loginButton = driver.findElement(By.cssSelector("[data-test-subj='loginSubmit']"));

wait.until(ExpectedConditions.presenceOfElementLocated(By.id("dashboard-container")));

Wait for Element Visibility:

javaCopy// Wait for a specific element to be visible
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@class, 'dashboard-content')]")));

ChromeOptions options = new ChromeOptions();
            Map<String, Object> prefs = new HashMap<>();
            prefs.put("download.default_directory", downloadPath);
            prefs.put("download.prompt_for_download", false);
            prefs.put("download.directory_upgrade", true);
            prefs.put("safebrowsing.enabled", true);
            options.setExperimentalOption("prefs", prefs);



public class VelocityCSVDownloader {
    // Configuration parameters
    private static final String BASE_URL = "https://your-velocity-elk-portal-url.com";
    private static final String USERNAME = "your_username";
    private static final String PASSWORD = "your_password";
    
    // Download directory (change this to your preferred path)
    private static final String DOWNLOAD_DIRECTORY = System.getProperty("user.home") + File.separator + "Downloads" + File.separator + "VelocityDownloads";
    
    // WebDriver path (update with your ChromeDriver path)
    private static final String CHROME_DRIVER_PATH = "/path/to/chromedriver";

    public static void main(String[] args) {
        // Set up ChromeDriver system property
        System.setProperty("webdriver.chrome.driver", CHROME_DRIVER_PATH);

        // Create download directory if it doesn't exist
        File downloadDir = new File(DOWNLOAD_DIRECTORY);
        if (!downloadDir.exists()) {
            downloadDir.mkdirs();
        }

        // Configure Chrome options
        ChromeOptions options = getChromeOptions();

        // Initialize WebDriver
        WebDriver driver = null;
        try {
            driver = new ChromeDriver(options);
            
            // Navigate to login page
            driver.get(BASE_URL);
            
            // Login process
            performLogin(driver);
            
            // Navigate to specific page with CSV download
            navigateToDownloadPage(driver);
            
            // Download CSV
            downloadCSV(driver);
            
            System.out.println("CSV download process completed successfully.");
            
        } catch (Exception e) {
            System.err.println("Error during CSV download: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Ensure driver is closed
            if (driver != null) {
                driver.quit();
            }
        }
    }

    private static ChromeOptions getChromeOptions() {
        ChromeOptions options = new ChromeOptions();
        
        // Configure download preferences
        Map<String, Object> prefs = new HashMap<>();
        prefs.put("download.default_directory", DOWNLOAD_DIRECTORY);
        prefs.put("download.prompt_for_download", false);
        prefs.put("download.directory_upgrade", true);
        prefs.put("safebrowsing.enabled", true);
        
        options.setExperimentalOption("prefs", prefs);
        
        // Optional: Run in headless mode
        // options.addArguments("--headless");
        
        return options;
    }

    private static void performLogin(WebDriver driver) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        try {
            // Replace these with actual login element locators
            WebElement usernameField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("username")));
            WebElement passwordField = driver.findElement(By.id("password"));
            WebElement loginButton = driver.findElement(By.id("login-button"));
            
            usernameField.sendKeys(USERNAME);
            passwordField.sendKeys(PASSWORD);
            loginButton.click();
            
            // Wait for login to complete
            wait.until(ExpectedConditions.urlContains("/dashboard"));
            
        } catch (Exception e) {
            System.err.println("Login failed: " + e.getMessage());
            throw e;
        }
    }

    private static void navigateToDownloadPage(WebDriver driver) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        try {
            // Navigate to page with CSV download
            // Replace with actual URL or navigation steps
            driver.get(BASE_URL + "/reports");
            
            // Wait for page to load
            wait.until(ExpectedConditions.jsReturnsValue("return document.readyState === 'complete'"));
            
        } catch (Exception e) {
            System.err.println("Navigation to download page failed: " + e.getMessage());
            throw e;
        }
    }

    private static void downloadCSV(WebDriver driver) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        try {
            // Find and click CSV download button
            // Replace with actual button locator
            WebElement downloadButton = wait.until(ExpectedConditions.elementToBeClickable(By.id("download-csv-button")));
            downloadButton.click();
            
            // Wait for download to complete
            // This is a simple wait - you might need more robust download detection
            Thread.sleep(5000);
            
            // Verify file was downloaded
            File[] downloadedFiles = new File(DOWNLOAD_DIRECTORY).listFiles((dir, name) -> name.endsWith(".csv"));
            if (downloadedFiles != null && downloadedFiles.length > 0) {
                System.out.println("CSV downloaded: " + downloadedFiles[0].getName());
            } else {
                throw new Exception("No CSV file downloaded");
            }
            
        } catch (Exception e) {
            System.err.println("CSV download failed: " + e.getMessage());
            throw new RuntimeException(e);
        }
    }
}

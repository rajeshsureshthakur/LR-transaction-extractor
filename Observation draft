import java.io.*;
import java.util.*;

public class CSVProcessor {
    // Define the transaction names to search for
    private static final Set<String> TRANSACTION_NAMES = new HashSet<>(Arrays.asList(
        "Transaction1",
        "Transaction2",
        "Transaction3"
        // Add more transaction names here
    ));

    public static void main(String[] args) {
        String file1Path = "input1.csv";  // First input file path
        String file2Path = "input2.csv";  // Second input file path
        String outputPath = "output.csv"; // Output file path
        
        // Store data from both files
        Map<String, List<String>> file1Data = new HashMap<>();
        Map<String, List<String>> file2Data = new HashMap<>();
        
        try {
            // Read first file
            readCSVFile(file1Path, file1Data);
            
            // Read second file
            readCSVFile(file2Path, file2Data);
            
            // Write output file only for specified transactions
            writeOutputFile(outputPath, file1Data, file2Data);
            
            System.out.println("Processing completed successfully!");
            
        } catch (Exception e) {
            System.err.println("Error processing files: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void readCSVFile(String filePath, Map<String, List<String>> dataMap) 
            throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // Split by comma, handling possible commas within quotes
                String[] values = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                
                if (values.length >= 2) {
                    String transactionName = values[0].trim().replace("\"", "");
                    // Only store data for transactions we're interested in
                    if (TRANSACTION_NAMES.contains(transactionName)) {
                        String responseTime = values[1].trim().replace("\"", "");
                        dataMap.put(transactionName, Arrays.asList(responseTime));
                    }
                }
            }
        }
    }
    
    private static void writeOutputFile(String outputPath, 
            Map<String, List<String>> file1Data, 
            Map<String, List<String>> file2Data) throws IOException {
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath))) {
            // Write header row
            writer.write("Transaction Name,PTE,NAM,IDL,Prod,NAM,IDL,Achieved X,NAM,IDL\n");
            
            // Write empty second row
            writer.write("\n");
            
            // Start writing data from row 3, only for specified transactions
            for (String transaction : TRANSACTION_NAMES) {
                if (file1Data.containsKey(transaction) || file2Data.containsKey(transaction)) {
                    StringBuilder row = new StringBuilder();
                    
                    // Add transaction name
                    row.append(escapeCsvField(transaction)).append(",");
                    
                    // Add data from file1
                    List<String> file1Values = file1Data.getOrDefault(transaction, Arrays.asList("", "", ""));
                    for (String value : file1Values) {
                        row.append(escapeCsvField(value)).append(",");
                    }
                    
                    // Add data from file2
                    List<String> file2Values = file2Data.getOrDefault(transaction, Arrays.asList("", "", ""));
                    for (String value : file2Values) {
                        row.append(escapeCsvField(value)).append(",");
                    }
                    
                    // Remove trailing comma and add newline
                    if (row.length() > 0) {
                        row.setLength(row.length() - 1);
                    }
                    row.append("\n");
                    
                    writer.write(row.toString());
                }
            }
        }
    }
    
    // Helper method to properly escape CSV fields
    private static String escapeCsvField(String field) {
        if (field == null) {
            return "";
        }
        if (field.contains(",") || field.contains("\"") || field.contains("\n")) {
            return "\"" + field.replace("\"", "\"\"") + "\"";
        }
        return field;
    }
}

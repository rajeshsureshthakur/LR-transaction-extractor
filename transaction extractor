import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;

public class ParseTransactionsToCsv {

    public static void main(String[] args) {
        String folderPath = "./scripts"; // Replace with your folder path containing .c files
        String outputFilePath = "./output.csv";

        File folder = new File(folderPath);
        if (!folder.exists() || !folder.isDirectory()) {
            System.out.println("Folder does not exist: " + folderPath);
            return;
        }

        List<String[]> csvData = new ArrayList<>();
        csvData.add(new String[]{"Script Name", "Transaction Name", "API Path"}); // Header row

        File[] files = folder.listFiles((dir, name) -> name.endsWith(".c"));
        if (files == null || files.length == 0) {
            System.out.println("No .c files found in the folder.");
            return;
        }

        for (File file : files) {
            String scriptName = file.getName().replace(".c", "");
            try {
                List<String[]> transactions = parseCFile(file, scriptName);
                csvData.addAll(transactions);
            } catch (IOException e) {
                System.out.println("Error reading file: " + file.getName());
            }
        }

        try {
            writeCsvFile(outputFilePath, csvData);
            System.out.println("Results saved to: " + outputFilePath);
        } catch (IOException e) {
            System.out.println("Error writing to CSV file: " + outputFilePath);
        }
    }

    private static List<String[]> parseCFile(File file, String scriptName) throws IOException {
        List<String[]> results = new ArrayList<>();
        List<String> lines = Files.readAllLines(file.toPath());
        Pattern transactionStartPattern = Pattern.compile("lr_start_transaction\\(\"([^\"]+)\"\\)");
        Pattern transactionEndPattern = Pattern.compile("lr_end_transaction\\(\"([^\"]+)\"\\)");
        Pattern urlPattern = Pattern.compile("URL=\\{?[^/}]+\\}?(/[^\" ]+)");

        String currentTransaction = null;

        for (String line : lines) {
            line = line.trim();

            // Check for transaction start
            Matcher startMatcher = transactionStartPattern.matcher(line);
            if (startMatcher.find()) {
                currentTransaction = startMatcher.group(1);
            }

            // Check for URL in API calls
            if (currentTransaction != null) {
                Matcher urlMatcher = urlPattern.matcher(line);
                if (urlMatcher.find()) {
                    String apiPath = urlMatcher.group(1); // Extract path part
                    results.add(new String[]{scriptName, currentTransaction, apiPath});
                }
            }

            // Check for transaction end
            Matcher endMatcher = transactionEndPattern.matcher(line);
            if (endMatcher.find()) {
                currentTransaction = null; // End current transaction
            }
        }

        return results;
    }

    private static void writeCsvFile(String filePath, List<String[]> data) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String[] row : data) {
                writer.write(String.join(",", escapeCsv(row)));
                writer.newLine();
            }
        }
    }

    private static String[] escapeCsv(String[] row) {
        return Arrays.stream(row)
                .map(value -> value.contains(",") ? "\"" + value + "\"" : value)
                .toArray(String[]::new);
    }
}
